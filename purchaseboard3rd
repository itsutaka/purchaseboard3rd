import React, { useState } from 'react';
import { Plus, MessageCircle, Edit, Trash2, X, Send, Calendar, User, RotateCcw } from 'lucide-react';

const PurchaseRequestBoard = () => {
  const [requests, setRequests] = useState([
    {
      id: 1,
      title: '辦公桌',
      description: '需要兩張可調高度的辦公桌，供新進同仁使用',
      requester: '王小明',
      status: 'pending',
      date: '2025-05-26',
      comments: []
    },
    {
      id: 2,
      title: '藍牙鍵盤',
      description: '辦公室需要新的藍牙鍵盤，最好是可以多設備切換的類型',
      requester: '李小華',
      status: 'pending',
      date: '2025-05-25',
      comments: [
        { id: 1, author: '張經理', content: '已經找到合適的型號了', date: '2025-05-25' }
      ]
    },
    {
      id: 3,
      title: '投影機',
      description: '會議室需要一台新的投影機，目前的已經故障無法使用',
      requester: '王小明',
      status: 'purchased',
      date: '2025-05-24',
      comments: []
    }
  ]);

  const [showModal, setShowModal] = useState(false);
  const [filter, setFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');
  const [activeComments, setActiveComments] = useState({});
  const [newComment, setNewComment] = useState('');
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    requester: ''
  });

  const statusLabels = {
    'pending': { text: '待購買', color: 'bg-yellow-100 text-yellow-800' },
    'purchased': { text: '已購買', color: 'bg-green-100 text-green-800' }
  };

  const handleSubmit = () => {
    if (!formData.title.trim() || !formData.description.trim() || !formData.requester.trim()) {
      return;
    }
    
    const newRequest = {
      id: requests.length + 1,
      ...formData,
      status: 'pending',
      date: new Date().toISOString().split('T')[0],
      comments: []
    };
    setRequests([newRequest, ...requests]);
    setFormData({ title: '', description: '', requester: '' });
    setShowModal(false);
  };

  const updateStatus = (id, newStatus) => {
    setRequests(requests.map(req => 
      req.id === id ? { ...req, status: newStatus } : req
    ));
  };

  const deleteRequest = (id) => {
    setRequests(requests.filter(req => req.id !== id));
  };

  const addComment = (requestId) => {
    if (!newComment.trim()) return;
    
    const comment = {
      id: Date.now(),
      author: '當前用戶',
      content: newComment,
      date: new Date().toISOString().split('T')[0]
    };

    setRequests(requests.map(req => 
      req.id === requestId 
        ? { ...req, comments: [...req.comments, comment] }
        : req
    ));
    
    setNewComment('');
  };

  const toggleComments = (requestId) => {
    setActiveComments(prev => ({
      ...prev,
      [requestId]: !prev[requestId]
    }));
  };

  const filteredRequests = requests.filter(req => {
    if (filter === 'all') return true;
    if (filter === 'pending') return req.status === 'pending';
    if (filter === 'purchased') return req.status === 'purchased';
    return true;
  });

  const sortedRequests = [...filteredRequests].sort((a, b) => {
    if (sortBy === 'newest') return new Date(b.date) - new Date(a.date);
    if (sortBy === 'oldest') return new Date(a.date) - new Date(b.date);
    return 0;
  });

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-gray-900">採購需求告示牌</h1>
            <button
              onClick={() => setShowModal(true)}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
            >
              <Plus size={20} />
              新增需求
            </button>
          </div>

          {/* Filters */}
          <div className="flex flex-wrap gap-4 items-center justify-between">
            <div className="flex gap-2">
              <span className="text-gray-700 font-medium">篩選：</span>
              <button
                onClick={() => setFilter('all')}
                className={`px-4 py-2 rounded-full text-sm transition-colors ${
                  filter === 'all' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                }`}
              >
                全部
              </button>
              <button
                onClick={() => setFilter('pending')}
                className={`px-4 py-2 rounded-full text-sm transition-colors ${
                  filter === 'pending' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                }`}
              >
                待購買
              </button>
              <button
                onClick={() => setFilter('purchased')}
                className={`px-4 py-2 rounded-full text-sm transition-colors ${
                  filter === 'purchased' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
                }`}
              >
                已購買
              </button>
            </div>

            <div className="flex items-center gap-2">
              <span className="text-gray-700 font-medium">排序：</span>
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="newest">最新建立</option>
                <option value="oldest">最舊建立</option>
              </select>
            </div>
          </div>
        </div>

        {/* Request Cards */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {sortedRequests.map((request) => (
            <div key={request.id} className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
              {/* Status Badge */}
              <div className="p-4 pb-0">
                <span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${statusLabels[request.status].color}`}>
                  {statusLabels[request.status].text}
                </span>
              </div>

              {/* Content */}
              <div className="p-4">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">{request.title}</h3>
                <p className="text-gray-600 text-sm mb-3 line-clamp-3">{request.description}</p>
                
                <div className="flex items-center gap-4 text-sm text-gray-500 mb-4">
                  <div className="flex items-center gap-1">
                    <Calendar size={16} />
                    <span>{request.date}</span>
                  </div>
                  {request.comments.length > 0 && (
                    <div className="flex items-center gap-1">
                      <MessageCircle size={16} />
                      <span>{request.comments.length}</span>
                    </div>
                  )}
                </div>

                {request.requester && (
                  <div className="flex items-center gap-1 text-sm text-gray-600 mb-4">
                    <User size={16} />
                    <span>提出者：{request.requester} • {request.date}</span>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex gap-2 mb-3">
                  <button
                    onClick={() => toggleComments(request.id)}
                    className="flex items-center gap-1 px-3 py-1 text-blue-600 hover:bg-blue-50 rounded transition-colors text-sm"
                  >
                    <MessageCircle size={16} />
                    留言
                  </button>
                  
                  {request.status === 'pending' && (
                    <button
                      onClick={() => updateStatus(request.id, 'purchased')}
                      className="flex items-center gap-1 px-3 py-1 text-green-600 hover:bg-green-50 rounded transition-colors text-sm"
                    >
                      ✓ 標記為已購買
                    </button>
                  )}
                  
                  {request.status === 'purchased' && (
                    <button
                      onClick={() => updateStatus(request.id, 'pending')}
                      className="flex items-center gap-1 px-3 py-1 text-orange-600 hover:bg-orange-50 rounded transition-colors text-sm"
                    >
                      <RotateCcw size={16} />
                      撤銷購買
                    </button>
                  )}
                  
                  <button
                    onClick={() => deleteRequest(request.id)}
                    className="flex items-center gap-1 px-3 py-1 text-red-600 hover:bg-red-50 rounded transition-colors text-sm ml-auto"
                  >
                    <Trash2 size={16} />
                  </button>
                </div>

                {/* Comments Section */}
                {activeComments[request.id] && (
                  <div className="border-t pt-3 mt-3">
                    {request.comments.length > 0 && (
                      <div className="space-y-2 mb-3">
                        {request.comments.map((comment) => (
                          <div key={comment.id} className="bg-gray-50 rounded p-2">
                            <div className="flex justify-between items-start mb-1">
                              <span className="font-medium text-sm text-gray-900">{comment.author}</span>
                              <span className="text-xs text-gray-500">{comment.date}</span>
                            </div>
                            <p className="text-sm text-gray-700">{comment.content}</p>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    <div className="flex gap-2">
                      <input
                        type="text"
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        placeholder="輸入留言..."
                        className="flex-1 border border-gray-300 rounded px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                        onKeyPress={(e) => e.key === 'Enter' && addComment(request.id)}
                      />
                      <button
                        onClick={() => addComment(request.id)}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded transition-colors"
                      >
                        <Send size={16} />
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Modal */}
        {showModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-md">
              {/* Modal Header */}
              <div className="bg-blue-500 text-white p-4 rounded-t-lg flex justify-between items-center">
                <h2 className="text-lg font-semibold">新增採購需求</h2>
                <button
                  onClick={() => setShowModal(false)}
                  className="text-white hover:bg-blue-600 p-1 rounded transition-colors"
                >
                  <X size={20} />
                </button>
              </div>

              {/* Modal Content */}
              <div className="p-6 space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    需求標題
                  </label>
                  <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => setFormData({...formData, title: e.target.value})}
                    placeholder="請輸入標題..."
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    詳細描述
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                    placeholder="請描述需求的詳細內容..."
                    rows="4"
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    提出者姓名
                  </label>
                  <input
                    type="text"
                    value={formData.requester}
                    onChange={(e) => setFormData({...formData, requester: e.target.value})}
                    placeholder="請輸入您的姓名..."
                    className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                {/* Modal Actions */}
                <div className="flex gap-3 pt-4">
                  <button
                    type="button"
                    onClick={() => setShowModal(false)}
                    className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-lg transition-colors"
                  >
                    取消
                  </button>
                  <button
                    type="button"
                    onClick={handleSubmit}
                    className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors"
                  >
                    提交需求
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PurchaseRequestBoard;